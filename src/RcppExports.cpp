// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sampleDepthContForMuCPP
SEXP sampleDepthContForMuCPP(double d, double mu, SEXP rY);
RcppExport SEXP _DepthProc_sampleDepthContForMuCPP(SEXP dSEXP, SEXP muSEXP, SEXP rYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rY(rYSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleDepthContForMuCPP(d, mu, rY));
    return rcpp_result_gen;
END_RCPP
}
// sampleMaxDepthForMuCPP
SEXP sampleMaxDepthForMuCPP(double mu, const SEXP rY, int d_min, int max_iter, double eps);
RcppExport SEXP _DepthProc_sampleMaxDepthForMuCPP(SEXP muSEXP, SEXP rYSEXP, SEXP d_minSEXP, SEXP max_iterSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rY(rYSEXP);
    Rcpp::traits::input_parameter< int >::type d_min(d_minSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleMaxDepthForMuCPP(mu, rY, d_min, max_iter, eps));
    return rcpp_result_gen;
END_RCPP
}
// sampleMaxLocScaleDepthCPP
SEXP sampleMaxLocScaleDepthCPP(SEXP ry, double iter, double eps, double p_length);
RcppExport SEXP _DepthProc_sampleMaxLocScaleDepthCPP(SEXP rySEXP, SEXP iterSEXP, SEXP epsSEXP, SEXP p_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ry(rySEXP);
    Rcpp::traits::input_parameter< double >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type p_length(p_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleMaxLocScaleDepthCPP(ry, iter, eps, p_length));
    return rcpp_result_gen;
END_RCPP
}
// runifsphereCPP
SEXP runifsphereCPP(double n, double p);
RcppExport SEXP _DepthProc_runifsphereCPP(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(runifsphereCPP(n, p));
    return rcpp_result_gen;
END_RCPP
}
// covCPP
SEXP covCPP(SEXP rX, int threads);
RcppExport SEXP _DepthProc_covCPP(SEXP rXSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(covCPP(rX, threads));
    return rcpp_result_gen;
END_RCPP
}
// meanCPP
SEXP meanCPP(SEXP rX, int threads);
RcppExport SEXP _DepthProc_meanCPP(SEXP rXSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(meanCPP(rX, threads));
    return rcpp_result_gen;
END_RCPP
}
// refRank
std::vector<double> refRank(std::vector<double> u, std::vector<double> x);
RcppExport SEXP _DepthProc_refRank(SEXP uSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type u(uSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(refRank(u, x));
    return rcpp_result_gen;
END_RCPP
}
// CovLPCPP
SEXP CovLPCPP(SEXP X, double p, double a, double b);
RcppExport SEXP _DepthProc_CovLPCPP(SEXP XSEXP, SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(CovLPCPP(X, p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// depthMahCPP
SEXP depthMahCPP(SEXP ru, SEXP rX, SEXP rcov, SEXP rmean, int threads);
RcppExport SEXP _DepthProc_depthMahCPP(SEXP ruSEXP, SEXP rXSEXP, SEXP rcovSEXP, SEXP rmeanSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ru(ruSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rcov(rcovSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rmean(rmeanSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(depthMahCPP(ru, rX, rcov, rmean, threads));
    return rcpp_result_gen;
END_RCPP
}
// depthProjCPP
SEXP depthProjCPP(SEXP ru, SEXP rX, double nproj, int threads);
RcppExport SEXP _DepthProc_depthProjCPP(SEXP ruSEXP, SEXP rXSEXP, SEXP nprojSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ru(ruSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    Rcpp::traits::input_parameter< double >::type nproj(nprojSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(depthProjCPP(ru, rX, nproj, threads));
    return rcpp_result_gen;
END_RCPP
}
// depthLPCPP
SEXP depthLPCPP(SEXP ru, SEXP rX, double p, double a, double b, int threads);
RcppExport SEXP _DepthProc_depthLPCPP(SEXP ruSEXP, SEXP rXSEXP, SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ru(ruSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(depthLPCPP(ru, rX, p, a, b, threads));
    return rcpp_result_gen;
END_RCPP
}
// depthTukeyCPP
SEXP depthTukeyCPP(SEXP ru, SEXP rX, bool exact, int threads);
RcppExport SEXP _DepthProc_depthTukeyCPP(SEXP ruSEXP, SEXP rXSEXP, SEXP exactSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ru(ruSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    Rcpp::traits::input_parameter< bool >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(depthTukeyCPP(ru, rX, exact, threads));
    return rcpp_result_gen;
END_RCPP
}
// modBandDepthRef
SEXP modBandDepthRef(SEXP rX, SEXP rxRef);
RcppExport SEXP _DepthProc_modBandDepthRef(SEXP rXSEXP, SEXP rxRefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rxRef(rxRefSEXP);
    rcpp_result_gen = Rcpp::wrap(modBandDepthRef(rX, rxRef));
    return rcpp_result_gen;
END_RCPP
}
// modBandDepth
SEXP modBandDepth(SEXP rX);
RcppExport SEXP _DepthProc_modBandDepth(SEXP rXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type rX(rXSEXP);
    rcpp_result_gen = Rcpp::wrap(modBandDepth(rX));
    return rcpp_result_gen;
END_RCPP
}
// depth2dcpp
NumericVector depth2dcpp(SEXP R_x, SEXP R_y);
RcppExport SEXP _DepthProc_depth2dcpp(SEXP R_xSEXP, SEXP R_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_x(R_xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_y(R_ySEXP);
    rcpp_result_gen = Rcpp::wrap(depth2dcpp(R_x, R_y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DepthProc_sampleDepthContForMuCPP", (DL_FUNC) &_DepthProc_sampleDepthContForMuCPP, 3},
    {"_DepthProc_sampleMaxDepthForMuCPP", (DL_FUNC) &_DepthProc_sampleMaxDepthForMuCPP, 5},
    {"_DepthProc_sampleMaxLocScaleDepthCPP", (DL_FUNC) &_DepthProc_sampleMaxLocScaleDepthCPP, 4},
    {"_DepthProc_runifsphereCPP", (DL_FUNC) &_DepthProc_runifsphereCPP, 2},
    {"_DepthProc_covCPP", (DL_FUNC) &_DepthProc_covCPP, 2},
    {"_DepthProc_meanCPP", (DL_FUNC) &_DepthProc_meanCPP, 2},
    {"_DepthProc_refRank", (DL_FUNC) &_DepthProc_refRank, 2},
    {"_DepthProc_CovLPCPP", (DL_FUNC) &_DepthProc_CovLPCPP, 4},
    {"_DepthProc_depthMahCPP", (DL_FUNC) &_DepthProc_depthMahCPP, 5},
    {"_DepthProc_depthProjCPP", (DL_FUNC) &_DepthProc_depthProjCPP, 4},
    {"_DepthProc_depthLPCPP", (DL_FUNC) &_DepthProc_depthLPCPP, 6},
    {"_DepthProc_depthTukeyCPP", (DL_FUNC) &_DepthProc_depthTukeyCPP, 4},
    {"_DepthProc_modBandDepthRef", (DL_FUNC) &_DepthProc_modBandDepthRef, 2},
    {"_DepthProc_modBandDepth", (DL_FUNC) &_DepthProc_modBandDepth, 1},
    {"_DepthProc_depth2dcpp", (DL_FUNC) &_DepthProc_depth2dcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_DepthProc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
